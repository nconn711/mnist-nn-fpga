--altmult_accum ACCUM_DIRECTION="ADD" ACCUM_SLOAD_PIPELINE_REG="CLOCK0" ACCUM_SLOAD_REG="CLOCK0" ADDNSUB_PIPELINE_REG="CLOCK0" ADDNSUB_REG="CLOCK0" CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEDICATED_MULTIPLIER_CIRCUITRY="AUTO" DEVICE_FAMILY="MAX 10" DSP_BLOCK_BALANCING="Auto" INPUT_REG_A="CLOCK0" INPUT_REG_B="CLOCK0" INPUT_SOURCE_A="DATAA" INPUT_SOURCE_B="DATAB" MULTIPLIER_REG="CLOCK0" OUTPUT_REG="CLOCK0" PORT_ADDNSUB="PORT_UNUSED" PORT_SIGNA="PORT_UNUSED" PORT_SIGNB="PORT_UNUSED" REPRESENTATION_A="SIGNED" REPRESENTATION_B="SIGNED" SIGN_PIPELINE_REG_A="CLOCK0" SIGN_PIPELINE_REG_B="CLOCK0" SIGN_REG_A="CLOCK0" SIGN_REG_B="CLOCK0" WIDTH_A=16 WIDTH_B=16 WIDTH_RESULT=33 accum_sload clock0 coefsel0 coefsel1 coefsel2 coefsel3 dataa datab datac result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 18.1 cbx_alt_ded_mult_y 2018:09:12:13:04:09:SJ cbx_alt_zaccum 2018:09:12:13:04:09:SJ cbx_altaccumulate 2018:09:12:13:04:09:SJ cbx_altera_mult_add 2018:09:12:13:04:09:SJ cbx_altera_mult_add_rtl 2018:09:12:13:04:09:SJ cbx_altmult_accum 2018:09:12:13:04:09:SJ cbx_altmult_add 2018:09:12:13:04:09:SJ cbx_cycloneii 2018:09:12:13:04:09:SJ cbx_lpm_add_sub 2018:09:12:13:04:09:SJ cbx_lpm_mult 2018:09:12:13:04:09:SJ cbx_mgl 2018:09:12:14:15:07:SJ cbx_nadder 2018:09:12:13:04:09:SJ cbx_padd 2018:09:12:13:04:09:SJ cbx_parallel_add 2018:09:12:13:04:09:SJ cbx_stratix 2018:09:12:13:04:09:SJ cbx_stratixii 2018:09:12:13:04:09:SJ cbx_util_mgl 2018:09:12:13:04:09:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION ded_mult_ek71 (aclr[3..0], clock[3..0], dataa[15..0], datab[15..0], ena[3..0])
RETURNS ( result[31..0]);
FUNCTION zaccum_ojk (aclr, clken, clock, data[31..0], zero_accum)
RETURNS ( result[32..0]);

--synthesis_resources = dsp_9bit 2 lut 33 reg 35 
SUBDESIGN mult_accum_1i82
( 
	accum_sload	:	input;
	clock0	:	input;
	coefsel0[2..0]	:	input;
	coefsel1[2..0]	:	input;
	coefsel2[2..0]	:	input;
	coefsel3[2..0]	:	input;
	dataa[15..0]	:	input;
	datab[15..0]	:	input;
	datac[21..0]	:	input;
	result[32..0]	:	output;
) 
VARIABLE 
	ded_mult1 : ded_mult_ek71;
	zaccum2 : zaccum_ojk;
	accum_sload_pipe_reg : dffe;
	accum_sload_reg : dffe;
	accum_sload_pipe_reg_wire	: WIRE;
	accum_sload_reg_wire	: WIRE;
	aclr0	: NODE;
	aclr1	: NODE;
	aclr2	: NODE;
	aclr3	: NODE;
	aclr_wire[3..0]	: WIRE;
	clock1	: NODE;
	clock2	: NODE;
	clock3	: NODE;
	clock_wire[3..0]	: WIRE;
	ena0	: NODE;
	ena1	: NODE;
	ena2	: NODE;
	ena3	: NODE;
	ena_wire[3..0]	: WIRE;

BEGIN 
	ded_mult1.aclr[] = ( B"000", aclr_wire[0..0]);
	ded_mult1.clock[] = ( B"111", clock_wire[0..0]);
	ded_mult1.dataa[] = dataa[];
	ded_mult1.datab[] = datab[];
	ded_mult1.ena[] = ( B"111", ena_wire[0..0]);
	zaccum2.aclr = aclr_wire[0..0];
	zaccum2.clken = ena_wire[0..0];
	zaccum2.clock = clock_wire[0..0];
	zaccum2.data[] = ded_mult1.result[];
	zaccum2.zero_accum = accum_sload_pipe_reg.q;
	accum_sload_pipe_reg.clk = clock_wire[0..0];
	accum_sload_pipe_reg.clrn = (! aclr_wire[0..0]);
	accum_sload_pipe_reg.d = accum_sload_pipe_reg_wire;
	accum_sload_pipe_reg.ena = ena_wire[0..0];
	accum_sload_reg.clk = clock_wire[0..0];
	accum_sload_reg.clrn = (! aclr_wire[0..0]);
	accum_sload_reg.d = accum_sload;
	accum_sload_reg.ena = ena_wire[0..0];
	accum_sload_pipe_reg_wire = accum_sload_reg_wire;
	accum_sload_reg_wire = accum_sload_reg.q;
	aclr0 = GND;
	aclr1 = GND;
	aclr2 = GND;
	aclr3 = GND;
	aclr_wire[] = ( aclr3, aclr2, aclr1, aclr0);
	clock1 = VCC;
	clock2 = VCC;
	clock3 = VCC;
	clock_wire[] = ( clock3, clock2, clock1, clock0);
	ena0 = VCC;
	ena1 = VCC;
	ena2 = VCC;
	ena3 = VCC;
	ena_wire[] = ( ena3, ena2, ena1, ena0);
	result[] = zaccum2.result[];
END;
--VALID FILE
