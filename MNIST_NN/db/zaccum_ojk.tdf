--alt_zaccum CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX 10" EXTRA_LATENCY=0 LPM_REPRESENTATION="SIGNED" WIDTH_IN=32 WIDTH_OUT=33 aclr clken clock data result zero_accum CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 18.1 cbx_alt_zaccum 2018:09:12:13:04:09:SJ cbx_altaccumulate 2018:09:12:13:04:09:SJ cbx_cycloneii 2018:09:12:13:04:09:SJ cbx_lpm_add_sub 2018:09:12:13:04:09:SJ cbx_mgl 2018:09:12:14:15:07:SJ cbx_nadder 2018:09:12:13:04:09:SJ cbx_stratix 2018:09:12:13:04:09:SJ cbx_stratixii 2018:09:12:13:04:09:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION accum_5dk (aclr, clken, clock, data[31..0], sload)
RETURNS ( result[32..0]);

--synthesis_resources = lut 33 reg 33 
SUBDESIGN zaccum_ojk
( 
	aclr	:	input;
	clken	:	input;
	clock	:	input;
	data[31..0]	:	input;
	result[32..0]	:	output;
	zero_accum	:	input;
) 
VARIABLE 
	accum : accum_5dk;

BEGIN 
	accum.aclr = aclr;
	accum.clken = clken;
	accum.clock = clock;
	accum.data[] = data[];
	accum.sload = zero_accum;
	result[] = accum.result[];
END;
--VALID FILE
